{"version":3,"file":"zenaton-examples.cjs.production.min.js","sources":["../src/index.ts","../src/tasks/refund-booking.ts"],"sourcesContent":["import { Client } from '@zenaton/client';\nimport { Worker } from '@zenaton/worker';\nimport { v4 as uuid } from 'uuid';\n\nimport { RefundBooking } from './tasks/refund-booking'\n\nconst opts = {\n  pulsar: {\n    client: {\n      serviceUrl: 'pulsar://localhost:6650',\n    },\n  },\n};\n\n\nconst client = new Client(opts)\nclient.dispatchTask(\"RefundBooking\", { bookingId: uuid(), userId: \"john.doe\"})\n\nconst worker = new Worker(opts);\nworker.registerTask(new RefundBooking);\nworker.run();\n\n","import { Task } from '@zenaton/worker';\n\nexport interface BookingData {\n  bookingId: string;\n  userId: string;\n}\n\nexport class RefundBooking implements Task {\n  name: string = \"RefundBooking\";\n  async handle(data: BookingData)  {\n    console.log(`Refunding booking ${data.bookingId} for user ${data.userId}.`);\n\n    // here you would typically send an http request to your payment system to process the refund.\n    // for this example, we will return a fake result considering the booking was correctly refunded.\n    return { result: 'ok' };\n  }\n}\n"],"names":["opts","pulsar","client","serviceUrl","Client","dispatchTask","bookingId","uuid","userId","worker","Worker","registerTask","constructor","handle","data","console","log","result","run"],"mappings":"6FAMA,MAAMA,EAAO,CACXC,OAAQ,CACNC,OAAQ,CACNC,WAAY,6BAMH,IAAIC,SAAOJ,GACnBK,aAAa,gBAAiB,CAAEC,UAAWC,OAAQC,OAAQ,aAElE,MAAMC,EAAS,IAAIC,SAAOV,GAC1BS,EAAOE,aAAa,UCZpBC,wBACiB,gBACTC,OAAOC,cACXC,QAAQC,yBAAyBF,EAAKR,sBAAsBQ,EAAKN,2BAI1D,CAAES,OAAQ,6CDMrBR,EAAOS"}