{"version":3,"file":"zenaton-examples.esm.js","sources":["../src/tasks/refund-booking.ts","../src/index.ts"],"sourcesContent":["import { Task } from '@zenaton/worker';\n\nexport interface BookingData {\n  bookingId: string;\n  userId: string;\n}\n\nexport class RefundBooking implements Task {\n  name: string = \"RefundBooking\";\n  async handle(data: BookingData)  {\n    console.log(`Refunding booking ${data.bookingId} for user ${data.userId}.`);\n\n    // here you would typically send an http request to your payment system to process the refund.\n    // for this example, we will return a fake result considering the booking was correctly refunded.\n    return { result: 'ok' };\n  }\n}\n","import { Client } from '@zenaton/client';\nimport { Worker } from '@zenaton/worker';\nimport { v4 as uuid } from 'uuid';\n\nimport { RefundBooking } from './tasks/refund-booking'\n\nconst opts = {\n  pulsar: {\n    client: {\n      serviceUrl: 'pulsar://localhost:6650',\n    },\n  },\n};\n\n\nconst client = new Client(opts)\nclient.dispatchTask(\"RefundBooking\", { bookingId: uuid(), userId: \"john.doe\"})\n\nconst worker = new Worker(opts);\nworker.registerTask(new RefundBooking);\nworker.run();\n\n"],"names":["RefundBooking","constructor","handle","data","console","log","bookingId","userId","result","opts","pulsar","client","serviceUrl","Client","dispatchTask","uuid","worker","Worker","registerTask","run"],"mappings":";;;;MAOaA;AAAbC,EAAAA;AACE,aAAA,GAAe,eAAf;AAQD;;AAPOC,EAAAA,OAAOC;;AACXC,MAAAA,OAAO,CAACC,GAAR,sBAAiCF,IAAI,CAACG,sBAAsBH,IAAI,CAACI,SAAjE;AAGA;;AACA,6BAAO;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAP;AACD;;;;;;;ACTH,MAAMC,IAAI,GAAG;AACXC,EAAAA,MAAM,EAAE;AACNC,IAAAA,MAAM,EAAE;AACNC,MAAAA,UAAU,EAAE;AADN;AADF;AADG,CAAb;AASA,MAAMD,MAAM,gBAAG,IAAIE,MAAJ,CAAWJ,IAAX,CAAf;AACAE,MAAM,CAACG,YAAP,CAAoB,eAApB,EAAqC;AAAER,EAAAA,SAAS,EAAES,EAAI,EAAjB;AAAqBR,EAAAA,MAAM,EAAE;AAA7B,CAArC;AAEA,MAAMS,MAAM,gBAAG,IAAIC,MAAJ,CAAWR,IAAX,CAAf;AACAO,MAAM,CAACE,YAAP,CAAoB,IAAIlB,aAAJ,EAApB;AACAgB,MAAM,CAACG,GAAP"}